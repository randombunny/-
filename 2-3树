//此处的2-3树，叶节点可以有3个数据项
#include<iostream>
#include<stack>
#include<queue>
using namespace std;

struct BTreeNode {
	int size;
	int key[3];
	bool isLeaf;
	BTreeNode* left, *right, *mid;
};

stack <BTreeNode*> Stack;
queue <BTreeNode*> Queue;

void print(BTreeNode* t) {
	if (!t)return;
	BTreeNode* tmp;
	Queue.push(t);
	int cur = 1;
	int curnum = 1;
	int nextnum = 0;
	while (!Queue.empty()) {
		tmp = Queue.front(), Queue.pop();
		if (!tmp->isLeaf) {
			curnum--;
			printf("[%d", tmp->key[0]);
			if (tmp->left) {
				Queue.push(tmp->left);
				nextnum++;
			}
			if (tmp->key[1] != -1) {
				printf(",%d]", tmp->key[1]);
				if (tmp->mid) {
					Queue.push(tmp->mid);
					nextnum++;
				}
			}
			else printf("]");
			if (tmp->right) {
				Queue.push(tmp->right);
				nextnum++;
			}
			if (curnum == 0) {
				printf("\n");
				cur++;
				curnum = nextnum;
				nextnum = 0;
			}

		}
		else {
			printf("[%d", tmp->key[0]);
			if (tmp->key[1] != -1)printf(",%d", tmp->key[1]);
			if (tmp->key[2] != -1)printf(",%d]", tmp->key[2]);
			else printf("]");
		}
	}
	//printf("\n");
}

int findKey(BTreeNode* t) {
	while (!t->isLeaf)t = t->left;
	return t->key[0];
}

void Insert(int x, BTreeNode*& t) {
	if (x < 0)return;
	while (!Stack.empty()) Stack.pop();
	BTreeNode* root;
	if (!t) {
		t = new BTreeNode;
		t->isLeaf = true;
		t->size = 1;
		t->key[0] = x;
		t->key[1] = t->key[2] = -1;
		t->left = t->right = t->mid = NULL;
		return;
	}
	//find leaves
	BTreeNode* p = t;
	while (!p->isLeaf) {
		Stack.push(p);
		if (p->size == 2) {
			if (x < p->key[0])p = p->left;
			else if (x > p->key[0])p = p->right;
			else {
				cout << "Key " << x << " is duplicated" << endl;
				return;
			}
		}
		else if (p->size == 3) {
			if (x < p->key[0])p = p->left;
			else if (x > p->key[0] && x < p->key[1])p = p->mid;
			else if (x > p->key[1])p = p->right;
			else {
				cout << "Key " << x << " is duplicated" << endl;
				return;
			}
		}
	}
	int i = p->size;
	//if leaf isn't full,insert
	if (i != 3) {
		for (int j = 0; j < 2; j++) {
			if (x == p->key[j]) {
				cout << "Key " << x << " is duplicated" << endl;
				return;
			}
		}

		while (i >= 1 && x <= p->key[i - 1]) {
			p->key[i] = p->key[i - 1];
			i--;
		}
		//data before remove,then insert
		p->key[i] = x;
		p->size++;
		return;
	}
	//leaf is full
	else{
		//break the leaf
		//始终维护node1<node2且node3<node4
		BTreeNode* node1 = p;
		BTreeNode* node2 = new BTreeNode;
		BTreeNode* node3 = NULL, *node4 = NULL;
		int a[4];
		for (int i = 0; i < 3; i++)a[i] = node1->key[i];
		if (x == a[0] || x == a[1] || x == a[2]) {
			cout << "Key " << x << " is duplicated" << endl;
			return;
		}
		int i = 2;
		for (; x < a[i] && i >= 0; i--)a[i + 1] = a[i];
		a[i + 1] = x;
		node1->key[0] = a[0], node1->key[1] = a[1], node1->key[2] = -1;
		node2->key[0] = a[2], node2->key[1] = a[3], node2->key[2] = -1;
		//node1->left = node1->right = node1->mid = NULL;
		node2->left = node2->right = node2->mid = NULL;
		node1->size = node2->size = 2;
		node1->isLeaf = node2->isLeaf = true;
		BTreeNode* parent = NULL, *tmp = p;
		//tmp是当前节点
		while (tmp != NULL) {
			if (!Stack.empty()) {
				parent = Stack.top();
				Stack.pop();
			}
			else parent = NULL;
			//case1:当前结点为根，树长高
			if (!parent) {
				root = new BTreeNode;
				root->left = node1;
				root->right = node2;
				root->mid = NULL;
				root->isLeaf = false;
				root->size = 2;
				root->key[0] = findKey(root->right);
				root->key[1] = root->key[2] = -1;
				t = root;
				break;
			}
			//case2:当前节点的父节点不满
			else if (parent->size == 2) {
				if (x < parent->key[0]) {
					parent->mid = node2;
					parent->left = node1;
				}
				else {
					parent->mid = node1;
					parent->right = node2;
				}
				parent->size = 3;
				parent->key[2] = -1;
				parent->key[1] = findKey(parent->right);
				parent->key[0] = findKey(parent->mid);
				parent->isLeaf = false;
				break;
			}
			//case3:父节点已满，分裂父节点
			else if (parent->size == 3) {
				node3 = parent;
				node4 = new BTreeNode;
				node3->isLeaf = node4->isLeaf = false;
				node3->size = node4->size = 2;
				if (x < parent->key[0]) {
					node4->left = parent->mid;
					node4->right = parent->right;
					node4->mid = NULL;
					node3->left = node1;
					node3->right = node2;
					node3->mid = NULL;
				}
				else if (x > parent->key[0] && x < parent->key[1]) {
					node4->left = node2;
					node4->right = parent->right;
					node4->mid = NULL;
					node3->left = parent->left;
					node3->right = node1;
					node3->mid = NULL;
				}
				else if (x > parent->key[1]) {
					node4->left = node1;
					node4->right = node2;
					node4->mid = NULL;
					node3->left = parent->left;
					node3->right = parent->mid;
					node3->mid = NULL;
				}
				node4->key[0] = findKey(node4->right);
				node3->key[0] = findKey(node3->right);
				node4->key[1] = node4->key[2] = node3->key[1] = node3->key[2] = -1;
				//现在parent及其子节点被解构为两个结点，赋值给node1和node2重新给parent的父节点进行判断
				node1 = node3, node2 = node4;
				tmp = parent;
			}
		}
	}
	return;
}
int main() {
	BTreeNode* t = NULL;
	int n, x, i;
	cin >> n;
	for (i = 0; i < n; i++) {
		cin >> x;
		Insert(x,t);
	}
	print(t);

}
